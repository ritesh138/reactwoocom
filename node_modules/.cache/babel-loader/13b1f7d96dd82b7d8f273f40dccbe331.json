{"ast":null,"code":"import React, { Component } from \"react\";\nimport { BaseUrl } from \"./../Config.js\";\nexport function postData(url, request_data, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"POST\",\n      body: JSON.stringify(request_data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}\nexport function getData(url, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      data: {\n        thumb: true\n      }\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}\nexport function deleteData(url, request_data, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"DELETE\",\n      body: JSON.stringify({\n        id: request_data\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/reactwoocom/src/service/Common.js"],"names":["React","Component","BaseUrl","postData","url","request_data","token","Promise","resolve","reject","fetch","method","body","JSON","stringify","headers","Authorization","then","response","json","responseJson","catch","error","console","getData","data","thumb","deleteData","id"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,YAAvB,EAAqCC,KAArC,EAA4C;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACR,OAAO,GAAGE,GAAX,EAAgB;AACnBO,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeT,YAAf,CAFa;AAGnBU,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYV;AAFpB;AAHU,KAAhB,CAAL,CAQGW,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQG,YAAY,IAAI;AACpBZ,MAAAA,OAAO,CAACY,YAAD,CAAP;AACD,KAXH,EAYGC,KAZH,CAYSC,KAAK,IAAI;AACdb,MAAAA,MAAM,CAACa,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAfH;AAgBD,GAjBM,CAAP;AAkBD;AAED,OAAO,SAASE,OAAT,CAAiBpB,GAAjB,EAAsBE,KAAtB,EAA6B;AAClC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACR,OAAO,GAAGE,GAAX,EAAgB;AACnBO,MAAAA,MAAM,EAAE,KADW;AAEnBI,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYV;AAFpB,OAFU;AAMnBmB,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANa,KAAhB,CAAL,CAUGT,IAVH,CAUQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVpB,EAWGF,IAXH,CAWQG,YAAY,IAAI;AACpBZ,MAAAA,OAAO,CAACY,YAAD,CAAP;AACD,KAbH,EAcGC,KAdH,CAcSC,KAAK,IAAI;AACdb,MAAAA,MAAM,CAACa,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAjBH;AAkBD,GAnBM,CAAP;AAoBD;AAED,OAAO,SAASK,UAAT,CAAoBvB,GAApB,EAAyBC,YAAzB,EAAuCC,KAAvC,EAA8C;AACjD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACR,OAAO,GAAGE,GAAX,EAAgB;AACnBO,MAAAA,MAAM,EAAE,QADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACc,QAAAA,EAAE,EAACvB;AAAJ,OAAf,CAFa;AAGnBU,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYV;AAFpB;AAHU,KAAhB,CAAL,CAQGW,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQG,YAAY,IAAI;AACpBZ,MAAAA,OAAO,CAACY,YAAD,CAAP;AACD,KAXH,EAYGC,KAZH,CAYSC,KAAK,IAAI;AACdb,MAAAA,MAAM,CAACa,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAfH;AAgBD,GAjBM,CAAP;AAkBD","sourcesContent":["import React, { Component } from \"react\";\nimport { BaseUrl } from \"./../Config.js\";\n\nexport function postData(url, request_data, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"POST\",\n      body: JSON.stringify(request_data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        resolve(responseJson);\n      })\n      .catch(error => {\n        reject(error);\n        console.error(error);\n      });\n  });\n}\n\nexport function getData(url, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      data: {\n        thumb: true\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        resolve(responseJson);\n      })\n      .catch(error => {\n        reject(error);\n        console.error(error);\n      });\n  });\n}\n\nexport function deleteData(url, request_data, token) {\n    return new Promise((resolve, reject) => {\n      fetch(BaseUrl + url, {\n        method: \"DELETE\",\n        body: JSON.stringify({id:request_data}),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      })\n        .then(response => response.json())\n        .then(responseJson => {\n          resolve(responseJson);\n        })\n        .catch(error => {\n          reject(error);\n          console.error(error);\n        });\n    });\n  }"]},"metadata":{},"sourceType":"module"}