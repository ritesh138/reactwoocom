{"ast":null,"code":"import React, { Component } from \"react\";\nimport { BaseUrl } from \"./../Config.js\";\nexport function postData(url, request_data, token) {\n  var headers = '';\n\n  if (token) {\n    headers = {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token\n    };\n  } else {\n    headers = {\n      \"Content-Type\": \"application/json\"\n    };\n  }\n\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"POST\",\n      body: JSON.stringify(request_data),\n      headers: headers\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}\nexport function getData(url, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      data: {\n        thumb: true\n      }\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}\nexport function deleteData(url, request_data, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"DELETE\",\n      body: JSON.stringify(request_data),\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      }\n    }).then(response => response.json()).then(responseJson => {\n      resolve(responseJson);\n    }).catch(error => {\n      reject(error);\n      console.error(error);\n    });\n  });\n}","map":{"version":3,"sources":["C:/reactwoocom/src/service/Common.js"],"names":["React","Component","BaseUrl","postData","url","request_data","token","headers","Authorization","Promise","resolve","reject","fetch","method","body","JSON","stringify","then","response","json","responseJson","catch","error","console","getData","data","thumb","deleteData"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAO,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,YAAvB,EAAqCC,KAArC,EAA4C;AACjD,MAAIC,OAAO,GAAG,EAAd;;AAEA,MAAGD,KAAH,EACA;AACEC,IAAAA,OAAO,GAAG;AACR,sBAAgB,kBADR;AAERC,MAAAA,aAAa,EAAE,YAAYF;AAFnB,KAAV;AAGD,GALD,MAMI;AACFC,IAAAA,OAAO,GAAG;AACR,sBAAgB;AADR,KAAV;AAGD;;AAED,SAAO,IAAIE,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACV,OAAO,GAAGE,GAAX,EAAgB;AACnBS,MAAAA,MAAM,EAAE,MADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,YAAf,CAFa;AAGnBE,MAAAA,OAAO,EAAEA;AAHU,KAAhB,CAAL,CAKGU,IALH,CAKQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EALpB,EAMGF,IANH,CAMQG,YAAY,IAAI;AACpBV,MAAAA,OAAO,CAACU,YAAD,CAAP;AACD,KARH,EASGC,KATH,CASSC,KAAK,IAAI;AACdX,MAAAA,MAAM,CAACW,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAZH;AAaD,GAdM,CAAP;AAeD;AAGD,OAAO,SAASE,OAAT,CAAiBpB,GAAjB,EAAsBE,KAAtB,EAA6B;AAClC,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACV,OAAO,GAAGE,GAAX,EAAgB;AACnBS,MAAAA,MAAM,EAAE,KADW;AAEnBN,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYF;AAFpB,OAFU;AAMnBmB,MAAAA,IAAI,EAAE;AACJC,QAAAA,KAAK,EAAE;AADH;AANa,KAAhB,CAAL,CAUGT,IAVH,CAUQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAVpB,EAWGF,IAXH,CAWQG,YAAY,IAAI;AACpBV,MAAAA,OAAO,CAACU,YAAD,CAAP;AACD,KAbH,EAcGC,KAdH,CAcSC,KAAK,IAAI;AACdX,MAAAA,MAAM,CAACW,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAjBH;AAkBD,GAnBM,CAAP;AAoBD;AAED,OAAO,SAASK,UAAT,CAAoBvB,GAApB,EAAyBC,YAAzB,EAAuCC,KAAvC,EAA8C;AACjD,SAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,IAAAA,KAAK,CAACV,OAAO,GAAGE,GAAX,EAAgB;AACnBS,MAAAA,MAAM,EAAE,QADW;AAEnBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeX,YAAf,CAFa;AAGnBE,MAAAA,OAAO,EAAE;AACP,wBAAgB,kBADT;AAEPC,QAAAA,aAAa,EAAE,YAAYF;AAFpB;AAHU,KAAhB,CAAL,CAQGW,IARH,CAQQC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EARpB,EASGF,IATH,CASQG,YAAY,IAAI;AACpBV,MAAAA,OAAO,CAACU,YAAD,CAAP;AACD,KAXH,EAYGC,KAZH,CAYSC,KAAK,IAAI;AACdX,MAAAA,MAAM,CAACW,KAAD,CAAN;AACAC,MAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,KAfH;AAgBD,GAjBM,CAAP;AAkBH","sourcesContent":["import React, { Component } from \"react\";\nimport { BaseUrl } from \"./../Config.js\";\n\nexport function postData(url, request_data, token) {\n  var headers = '';\n\n  if(token)\n  {\n    headers = { \n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + token }\n  }\n  else{\n    headers = { \n      \"Content-Type\": \"application/json\"\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"POST\",\n      body: JSON.stringify(request_data),\n      headers: headers\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        resolve(responseJson);\n      })\n      .catch(error => {\n        reject(error);\n        console.error(error);\n      });\n  });\n}\n\n\nexport function getData(url, token) {\n  return new Promise((resolve, reject) => {\n    fetch(BaseUrl + url, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + token\n      },\n      data: {\n        thumb: true\n      }\n    })\n      .then(response => response.json())\n      .then(responseJson => {\n        resolve(responseJson);\n      })\n      .catch(error => {\n        reject(error);\n        console.error(error);\n      });\n  });\n}\n\nexport function deleteData(url, request_data, token) {\n    return new Promise((resolve, reject) => {\n      fetch(BaseUrl + url, {\n        method: \"DELETE\",\n        body: JSON.stringify(request_data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + token\n        }\n      })\n        .then(response => response.json())\n        .then(responseJson => {\n          resolve(responseJson);\n        })\n        .catch(error => {\n          reject(error);\n          console.error(error);\n        });\n    });\n}"]},"metadata":{},"sourceType":"module"}